AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Designer':
    8ce2d05e-aa87-4ef0-8f33-bfd22ecbc207:
      size:
        width: 60
        height: 60
      position:
        x: 170
        'y': 220
      z: 0
      embeds: []
      dependson:
        - a0e598b9-856a-4dcb-b715-f9fe0ed0ab9f
    a0e598b9-856a-4dcb-b715-f9fe0ed0ab9f:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 140
      z: 0
      embeds: []
    478df7a2-24c7-4f33-9cd0-701ecaeb9b82:
      size:
        width: 60
        height: 60
      position:
        x: 89.66920339917384
        'y': 231.4614713366727
      z: 0
      embeds: []
      isassociatedwith:
        - a0e598b9-856a-4dcb-b715-f9fe0ed0ab9f
    783436e9-93dd-4f15-b38d-ecb517306b31:
      source:
        id: 478df7a2-24c7-4f33-9cd0-701ecaeb9b82
      target:
        id: a0e598b9-856a-4dcb-b715-f9fe0ed0ab9f
      z: 11
Parameters:
  LambdaName:
    Default: SleepSaverProd
    Type: String
  LambdaDescription:
    Default: 'Lambda that will look for the Tag DEVDAY : TRUE and will put common assets to sleep at the end of the day, and will start them on next day'
    Type: String
  CodeBucket:
    Description: This must be the S3 Bucket where the code has been packaged and deployed to
    Default: evg-sleepsaver-cf
    Type: String
  DayScheduleExpression:
    Description: Cron expression to define the schedule when the services should start, this reads 1.30am, Mon-Friday
    Default: 'cron(30 1 ? * 2-6 *)'
    Type: String
  NightScheduleExpression:
    Description: Cron expression to define the schedule for when the services should shut-down , this reads 18:45 every day
    Default: 'cron(45 18 * * ? *)'
    Type: String
  RegionSearchList:
    Description: Define the regions you wish to scan looking for tagged resources.
    Default: 'eu-west-1, eu-west-2'
    Type: String
  StepFunctionName:
    Default: sleepSaverDelayedAppTierCF
    Type: String

Resources:
  # Defines the StepFunction for the delayed application tier start 15 minutes after the RDS start
  SLEEPSTEPFN:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: sleepSaverDelayedAppTierCF
      RoleArn: !Sub
        - 'arn:aws:iam::${ACC}:role/sleepSaverStepExec'
        - ACC: !Ref "AWS::AccountId"
      DefinitionSubstitutions:
        LAMBDASUB: !Sub
          - 'arn:aws:lambda:${REG}:${ACC}:function:${LAMB}:$LATEST'
          - ACC: !Ref "AWS::AccountId"
            REG: !Ref "AWS::Region"
            LAMB: !Ref LambdaName
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: 'stepsyntax.json'
    DependsOn: IAMROLESLEEPSTATE
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e2841855-4372-41cd-bd48-074a429d0d03
  # Defines the Execution Role for the State machine to be able to user
  IAMROLESLEEPSTATE:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: sleepSaverStepExec
      Description: >-
        Sleepsaver execution role for the statemachine to delay application tier
        start
      MaxSessionDuration: 4600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 08a0de2f-1234-405f-b984-452c7f49113b
  # Defines the Policy to allow the Lambda to be invoked from the Step Function execution Role
  IAMPLAMSLEEP:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: sleepSaverInvokeLambda
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !Sub
                - 'arn:aws:lambda:${REG}:${ACC}:function:${LAMF}:*'
                - ACC: !Ref "AWS::AccountId"
                  REG: !Ref "AWS::Region"
                  LAMF: !Ref LambdaName
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !Sub
                - 'arn:aws:lambda:${REG}:${ACC}:function:${LAMF}'
                - ACC: !Ref "AWS::AccountId"
                  REG: !Ref "AWS::Region"
                  LAMF: !Ref LambdaName
      Roles:
        - !Ref IAMROLESLEEPSTATE
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 86cc5a8b-6f47-447b-824e-928dc2cb964d
 # Core of the Legacy Sleep saver CF
  DDBT1TDK8:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: asgName
          AttributeType: S
        - AttributeName: region
          AttributeType: S
      TableName: asgState
      KeySchema:
        - AttributeName: asgName
          KeyType: HASH
        - AttributeName: region
          KeyType: RANGE
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1f1a32b3-072e-46ef-8815-6451bea883f2
  DDBT4E67X:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: ecsArn
          AttributeType: S
        - AttributeName: region
          AttributeType: S
      TableName: ecsStatev2
      KeySchema:
        - AttributeName: ecsArn
          KeyType: HASH
        - AttributeName: region
          KeyType: RANGE
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 41c92a16-5756-4f05-8acd-93e3e7d9b78d

  #Edit 3 S3Key for the zip containing lambda code
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Role:  !GetAtt IAMRSLEEPLAMSRVC.Arn
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Description: !Ref LambdaDescription
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          ECSDBREGION: eu-west-2
          ECSDYNTABLE: ecsStatev2
          REGIONLIST: !Ref RegionSearchList
          SEARCHTAG: DEVDAY
          ASGDYNTABLE: asgState
          ASGREGION: eu-west-2
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: 'sleepsaverlambda.zip'
    DependsOn:
      - IAMPDYN

  # Role for the DayTime Event Rule: Target to invoke the Step function
  IAMRSTEPEX:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: sleepSaver-stepfunction-invoke-role
      Description: 'Sleepsaver: allows the daytime rule target to invoke the delayed start step function'
      MaxSessionDuration: 4600
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'

  # Policy that allows the step function to be invoked from the Event Rule Target --> associates itself with IAMRSTEPEX role
  IAMPSTEPFINV:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: sleepStepFunctionInvoke
      Roles:
        - !Ref IAMRSTEPEX
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'states:StartExecution'
            Resource:
              - !Sub
                - 'arn:aws:states:${REG}:${ACC}:stateMachine:${STNAME}'
                - ACC: !Ref "AWS::AccountId"
                  REG: !Ref "AWS::Region"
                  STNAME: !Ref StepFunctionName


 # Policy to allow writing to dynamoDB
  IAMPDYN:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SLEEPECSDYNRW
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:Scan'
            Resource:
              - !Sub
                - 'arn:aws:dynamodb:${REG}:${ACC}:table/asgState'
                - ACC: !Ref "AWS::AccountId"
                  REG: !Ref "AWS::Region"
              - !Sub
                - 'arn:aws:dynamodb:${REG}:${ACC}:table/ecsStatev2'
                - ACC: !Ref "AWS::AccountId"
                  REG: !Ref "AWS::Region"
      Roles:
        - !Ref IAMRSLEEPLAMSRVC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8ce2d05e-aa87-4ef0-8f33-bfd22ecbc207
    DependsOn:
      - DDBT1TDK8
      - DDBT4E67X
  NightRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SleepSaverNightRule
      Description: sleepsaverProd Start of Night Schedule
      ScheduleExpression: !Ref NightScheduleExpression
      Targets:
        - Id: !Ref LambdaName
          Arn: !GetAtt LambdaFunction.Arn
          Input: '{ "event": "STOP"}'
      State: ENABLED

  # Defines the Event Rule for waking up severs; contains a dual target to prewarm the Database first and then a step function invokes a delayed start for the app tier
  DayRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SleepSaverDayRule
      Description: sleepsaverProd Start of Day Schedule
      ScheduleExpression: !Ref DayScheduleExpression
      Targets:
        - Id: !Ref LambdaName
          Arn: !GetAtt LambdaFunction.Arn
          Input: '{ "event": "START"}'
        - Id: 'delayedStartStepFunction'
          Arn: !GetAtt SLEEPSTEPFN.Arn
          Input: '{ "event": "START"}'
          RoleArn: !GetAtt IAMRSTEPEX.Arn
      State: ENABLED


  InvokeLambdaRule:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaName
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
    DependsOn: LambdaFunction


  IAMRSLEEPLAMSRVC:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: sleepSaver-Lambda-execution-role
      Description: 'Sleepsaver exeuction role'
      MaxSessionDuration: 4600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonECS_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkReadOnly'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'


    Metadata:
      'AWS::CloudFormation::Designer':
        id: 478df7a2-24c7-4f33-9cd0-701ecaeb9b82
